{
//? Nesting of Objects and Arrays in Json

/* In Json, you can nest objects and arrays to represent more complex data structures. This you
allows you to organize data in a hierarchical manner and represents a fundamental part of the flexibility and
Json versatility. Next I show you how to nest objects and arrays in Json. */

    // Nesting Objects
   "person": {
       "name": "John",
       "age": 30,
       "address": {
           "street": "123 Street Example",
           "city": "Exampleville"
       }
   },
   // Nesting of Arrays
    "employees": [
        {
            "name": "Ana",
            "age": 25
        },
        {
            "name": "Peter",
            "age": 28
        }
    ],
    // Combining Nesting
    "people": [
    {
        "name": "John",
        "ages": [30, 35, 40]
    },
    {
        "name": "Mary",
        "ages": [28, 32]
    }
]

//* 1. **Nesting of Objects**

/* You can nest Json objects inside other objects. This is useful for representing structures of
hierarchical data. For example. */

 // In this example, the "person" object contains subobjects such as "address", which in turn contains
// your own key-value pairs.

//* 2. **Nesting of Arrays**

/* You can also nest Json arrays inside other arrays or inside objects. This is useful when
you need to represent collections of related elements. For example. */

 // In this example, the "employees" array contains two objects that represent two employees.

//* 3. **Combining Nesting**

/* You can combine the nesting of objects and arrays to represent more data structures
complex. Here is an example showing an array of objects, where each object has a field that
It is an array of values. */

  // In this example, the "people" array contains objects that include an "ages" array for
 // each person.

/* Nesting in Json allows data to be represented in a more structured and complex way. When you work
With Json in your application, you can access nested values using dot or square bracket notation
depending on the structure. For example, to access the age of the second person in the example above,
you could use */

/* Note that when manipulating data nested in Json, you must ensure that you access the elements of
safe way to avoid errors if a value does not exist in the structure. */
}